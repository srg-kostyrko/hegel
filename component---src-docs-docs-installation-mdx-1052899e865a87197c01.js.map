{"version":3,"sources":["webpack:///../src/docs/docs/installation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ocAMO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,uBACA,qEACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,sEAML,kEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kEAML,8BACE,iBAAGA,WAAW,cAAd,kDAA8E,mBAAGA,WAAW,KAAQ,CAChG,KAAQ,2BADkE,qBAA9E,gDAIF,2DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0BAKL,iBAAQ,CACN,GAAM,iBADR,iBAGA,gJAA+H,mBAAGA,WAAW,KAAQ,CACjJ,KAAQ,oDADmH,qBAA/H,KAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2DAIL,qHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mEAML,oDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,6FAIL,wEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2JASL,uCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,sBAIL,8BACE,iBAAGA,WAAW,cAAa,mBAAGA,WAAW,KAAQ,CAC7C,KAAQ,6BADe,oC,8MAQjCJ,EAAWK,gBAAiB","file":"component---src-docs-docs-installation-mdx-1052899e865a87197c01.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/hegel/hegel/packages/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h1>\n    <hr></hr>\n    <p>{`You can install Hegel CLI using npm or yarn:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ npm install -g @hegel/cli\n# or\n$ yarn global add @hegel/cli\n`}</code></pre>\n    <p>{`Or install locally only for your project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ npm install -D @hegel/cli\n# or\n$ yarn add -D @hegel/cli\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Hegel was developed for current LTS version of `}<a parentName=\"p\" {...{\n          \"href\": \"https://nodejs.org/en/\"\n        }}>{`Node.js (12.16.1)`}</a>{`. So, you need to have at least version 12.`}</p>\n    </blockquote>\n    <p>{`And run Hegel inside your project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ hegel\nNo errors!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setup-project\"\n    }}>{`Setup Project`}</h2>\n    <p>{`Also you need to setup a compiler which will strip away Hegel types. The same as Flow, you can choose between Babel and `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/flow-remove-types\"\n      }}>{`flow-remove-types`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ npm i -D @babel/core @babel/cli @babel/preset-flow\n`}</code></pre>\n    <p>{`After that you need to create a .babelrc file at the root of your project with next content:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"presets\": [[\"@babel/preset-flow\", { \"all\": true }]]\n}\n`}</code></pre>\n    <p>{`Now you can run it manualy:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ npx babel directory_with_your_project_files/ -- -d compilation_destination_directory\n`}</code></pre>\n    <p>{`Or you can add script inside your package.json:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"name\": \"your-project\",\n  \"scripts\": {\n    \"build\": \"babel directory_with_your_project_files/ -d compilation_destination_directory/\",\n  }\n}\n`}</code></pre>\n    <p>{`And run it by:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`$ npm run build\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><a parentName=\"p\" {...{\n          \"href\": \"https://babeljs.io/setup\"\n        }}>{`\"More about Babel setup\"`}</a></p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}